<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>ctr_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init.

 // Variables:
    clear_bgm    = false; // Used to set the bgm volume to 0 when the stage has been cleared.
    fadeout_flag = false;
    clear_fade   = false; // Used to fade out the sfx volume when the stage has been cleared.
    death_fade   = false; // Used to fade out the bgm and sfx volume when the character has died.
    
 // Make a backup variable for volumes:
    backup_bgm_volume = global.bgm_volume;
    backup_sfx_volume = global.sfx_volume;
    backup_ev_volume  = global.ev_volume;
    
 // Create the Music variables, remember to free them in the game end event!
    _BGM = -1;
    bgm_test_stage = working_directory+"\data\sound\bgm\msc_test_stage.ogg";    
    global._bgmHandle = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Volume changing.
 // Some sounds or events cause the bgm or sfx volume to change, this script will handle it.
 
 // Exit when the results are on screen.
    if(instance_exists(obj_results) &amp;&amp; clear_bgm == false)
    {
       clear_bgm = true;    
       audio_stop_all();
       global.bgm_volume = backup_bgm_volume;
       global.sfx_volume = backup_sfx_volume;      
       audio_play(_ev_act_clear, global.ev_volume);  
       exit;
    }
    if(clear_bgm  == true)
    {
       exit;
    } 
    
    if(fadeout_flag == false)
    {
       if(global._bgmHandle != -1)
       {
       if(audio_is_playing(_ev_life) || audio_is_playing(_ev_sneakers) || audio_is_playing(_ev_invincibility) || audio_is_playing(_ev_drown))
       { 
          if(global.bgm_volume != 0)
          {
             global.bgm_volume = 0;
          }
       }
       else
       {
          if(global.bgm_volume &lt; backup_bgm_volume)
          {
             global.bgm_volume += 0.01;
          }
          else
          {
             global.bgm_volume = backup_bgm_volume;
          }
       }    
       audio_set_volume(global._bgmHandle, global.bgm_volume);
       }
    
    // Change the volume of certain events/jingles when the 1UP sound is playing.
      if(audio_is_playing(_ev_life))
      {
         // Sneakers:
         if(audio_is_playing(_ev_sneakers))
         {
            if(audio_get_volume(_ev_sneakers) != 0)
            {
               audio_set_volume(_ev_sneakers, 0);
            }
         }
         // Invincibility:
         if(audio_is_playing(_ev_invincibility))
         {
            if(audio_get_volume(_ev_invincibility) != 0)
            {
               audio_set_volume(_ev_invincibility, 0);
            }
         }  
         // Drown:
         if(audio_is_playing(_ev_drown))
         {
            if(audio_get_volume(_ev_drown) != 0)
            {
               audio_set_volume(_ev_drown, 0);
            }
         }                    
      }
      else
      {
         // Sneakers:
         if(audio_is_playing(_ev_sneakers))
         {
            if(audio_get_volume(_ev_sneakers) &lt; global.ev_volume)
            {
               audio_set_volume(_ev_sneakers, audio_get_volume(_ev_sneakers)+0.01);
            }
            else if(audio_get_volume(_ev_sneakers) &gt; global.ev_volume)
            {
                    audio_set_volume(_ev_sneakers, global.ev_volume);          
            }
         }   
         // Invincibility:
         if(audio_is_playing(_ev_invincibility))
         {
            if(audio_get_volume(_ev_invincibility) &lt; global.ev_volume)
            {
               audio_set_volume(_ev_invincibility, audio_get_volume(_ev_invincibility)+0.01);
            }
            else if(audio_get_volume(_ev_invincibility) &gt; global.ev_volume)
            {
                    audio_set_volume(_ev_invincibility, global.ev_volume);          
            }
         }    
         // Drown:
         if(audio_is_playing(_ev_drown))
         {
            if(audio_get_volume(_ev_drown) &lt; global.ev_volume)
            {
               audio_set_volume(_ev_drown, audio_get_volume(_ev_drown)+0.01);
            }
            else if(audio_get_volume(_ev_drown) &gt; global.ev_volume)
            {
                    audio_set_volume(_ev_drown, global.ev_volume);          
            }
         }                 
      }
      
   // Mute jingles when the invincibility or drowning jingle is playing.
      if(audio_is_playing(_ev_invincibility) || audio_is_playing(_ev_drown))
      { 
         // Sneakers:
         if(audio_is_playing(_ev_sneakers))
         {
            if(audio_get_volume(_ev_sneakers) != 0)
            {
               audio_set_volume(_ev_sneakers, 0);
            }
         }
         // Invincibility:
         if(audio_is_playing(_ev_invincibility) &amp;&amp; audio_is_playing(_ev_drown))
         {
            if(audio_get_volume(_ev_invincibility) != 0)
            {
               audio_set_volume(_ev_invincibility, 0);
            }
         }           
      }
      else
      {
         // Sneakers:
         if(audio_is_playing(_ev_sneakers))
         {
            if(audio_get_volume(_ev_sneakers) &lt; global.ev_volume)
            {
               audio_set_volume(_ev_sneakers, audio_get_volume(_ev_sneakers)+0.01);
            }
            else if(audio_get_volume(_ev_sneakers) &gt; global.ev_volume)
            {
                    audio_set_volume(_ev_sneakers, global.ev_volume);          
            }
         }   
         // Invincibility:
         if(audio_is_playing(_ev_invincibility) &amp;&amp; !audio_is_playing(_ev_drown))
         {
            if(audio_get_volume(_ev_invincibility) &lt; global.ev_volume)
            {
               audio_set_volume(_ev_invincibility, audio_get_volume(_ev_invincibility)+0.01);
            }
            else if(audio_get_volume(_ev_invincibility) &gt; global.ev_volume)
            {
                    audio_set_volume(_ev_invincibility, global.ev_volume);          
            }
         }        
      }     
      
   }
   else
   {
      if(global.bgm_volume &gt; 0.0)
      {
         global.bgm_volume -= 0.01;
      }
      else
      {
         global.bgm_volume = 0;
      }
      if(global.sfx_volume &gt; 0.0)
      {
         global.sfx_volume -= 0.01;
      }
      else
      {
         global.sfx_volume = 0;
      }
      audio_set_volume(global._bgmHandle, global.bgm_volume);
   }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop all sounds.

    global._bgmHandle = -1;
    audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play background music and set volumes.

 // Disable flags and reset volumes:
    clear_bgm         = false;
    fadeout_flag      = false;
    global.bgm_volume = backup_bgm_volume;
    global.sfx_volume = backup_sfx_volume;
   
          
 // Main Menu:
    zone_play_bgm(rm_menu, msc_menu);
    
 // Collision Test Stage:
    zone_play_bgm(rm_collision_test, msc_test_stage_col);
          
 // Test Stage:
    zone_play_bgm(rm_test_stage, msc_test_stage);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free audio.
 
    audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="119">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete configuration and restart. 

   if(show_question("Do you want to erase all configuration data and restart the game?"))
   {
      file_delete(working_directory+"\data\config\audio.hzc");
      file_delete(working_directory+"\data\config\screen.hzc");
      file_delete(working_directory+"\data\config\input.hzc");
      file_delete(working_directory+"\data\config\gameplay.hzc"); 
      game_restart();           
   }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
