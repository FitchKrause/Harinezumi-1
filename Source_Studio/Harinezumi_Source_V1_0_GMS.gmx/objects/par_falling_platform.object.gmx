<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_moving_platform</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.
 
 // Call parent.
    event_inherited();
    
 // Set relative and previous position variables:
    relative_x = x; // Relative x position.
    relative_y = y; // Relative y position.
    previous_x = x; // Previous x position.
    previous_y = y; // Previous y position.
    
 // Set speed variables:
    x_speed      = 0; // Horizontal speed.
    y_speed      = 0; // Vertical speed.
    xd_speed     = 0; // Increases/Decreases horizontal speed while changing directions.
    yd_speed     = 0; // Increases/Decreases vertial speed while changing directions.
    horz_speed   = 0; // (Actual) horizontal platform speed, in case it is set to 0 and needs to be set. 
    vert_speed   = 0; // (Actual) vertical platform speed, in case it is set to 0 and needs to be set.  
    x_diracc     = 0; // How fast the platform accels/decels when switching directions.
    y_diracc     = 0; // How fast the platform accels/decels when switching directions. 
    active       = 0; // Is the platform active?
    lower        = 0; // Does this platform slightly lower itself when a character is on it?
    lower_yact   = 0; // Actual lower position.
    lower_y      = 0; // How much the platform lowers. 
    lower_yspd   = 0; // How fast the platform lowers.
    fall_trigger = 0; // Check if the falling state has been triggered.
    fall_timer   = 0; // How long it takes until we fall. 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement &amp; Player position.

 // Active. 
    if(active == false)
    {
       if(in_view() == true)
       {
          active = true;
       }
    }
    
 // Only run IF active:
    if(active == false) exit;
    
 // Set previous positions:
    previous_x = x;
    previous_y = y;
    
 // Set Horizontal and vertical speeds:
    if(x_spd &lt; xd_speed)
    {
       xd_speed -= x_diracc;
    }
    else if(x_spd &gt; xd_speed)
    {
            xd_speed += x_diracc;
    }
    if(y_spd &lt; yd_speed)
    {
       yd_speed -= y_diracc;
    }
    else if(y_spd &gt; yd_speed)
    {
            yd_speed += y_diracc;
    }
    x_speed += xd_speed;
    y_speed += yd_speed;
    
 // Floor Position:   
    if(fall_timer &gt; 0)
    {
       x = floor(relative_x+x_speed);
       y = floor(relative_y+y_speed+lower_yact); 
    }
    
 // Update player position.
    _main_char = par_character;    
    if(instance_exists(_main_char))
    {
       if(_main_char.ground == true &amp;&amp; _main_char.platform_id == id &amp;&amp; _main_char.state != CS_DEATH)
       {
          _main_char.x += (x-previous_x);
          _main_char.y  = ((y-sprite_yoffset)-(platform_offset));
          
          if(fall_trigger == false)
          {
             fall_trigger = true;
          }
          
          if(lower == true)
          {
             if(lower_yact &lt; lower_y)
             {
                lower_yact += lower_yspd;
             }
             if(lower_yact &gt; lower_y)
             {
                lower_yact = lower_y;
             }             
          }          
       }
       else
       {
          if(lower == true)
          {
             if(lower_yact &gt; 0)
             {
                lower_yact -= lower_yspd;
             }
             if(lower_yact &lt; 0)
             {
                lower_yact = 0;
             }
          }
       }
    }
    else
    {
      if(lower == true)
      {
         if(lower_yact &gt; 0)
         {
            lower_yact -= lower_yspd;
         }
         if(lower_yact &lt; 0)
         {
            lower_yact = 0;
         }
      }    
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flag change.

    flag_up    = collision_circle(x+sprite_get_width(sprite_index)/2, y+sprite_get_height(sprite_index)/2, 8, obj_platform_flag_move_up, 0, 1);
    flag_down  = collision_circle(x+sprite_get_width(sprite_index)/2, y+sprite_get_height(sprite_index)/2, 8, obj_platform_flag_move_down, 0, 1);    
    flag_left  = collision_circle(x+sprite_get_width(sprite_index)/2, y+sprite_get_height(sprite_index)/2, 8, obj_platform_flag_move_left, 0, 1);
    flag_right = collision_circle(x+sprite_get_width(sprite_index)/2, y+sprite_get_height(sprite_index)/2, 8, obj_platform_flag_move_right, 0, 1);  
    
    if(flag_up != noone)
    {
       x_spd = 0;    
       if(y_spd &lt; 0)
       {
          y_spd *= -1;
       }      
       else
       {
          y_spd = -vert_speed;
       } 
    }
    if(flag_down != noone)
    {
       x_spd = 0;    
       if(y_spd &gt; 0)
       {
          y_spd *= -1;
       } 
       else
       {
          y_spd = vert_speed;
       }        
    }        
    if(flag_left != noone)
    {
       if(x_spd &gt; 0)
       {
          x_spd *= -1;
       }
       else
       {
          x_spd = -horz_speed;
       }           
       y_spd = 0;
    }
    if(flag_right != noone)
    {
       if(x_spd &lt; 0)
       {
          x_spd *= -1;
       }
       else
       {
          x_spd = horz_speed;
       }                  
       y_spd = 0;
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fall timer.
    if(fall_trigger == true)
    {    
       if(fall_timer &gt; 0)
       {
          fall_timer -= 1;
       }
       else
       {
          x_speed  = 0;
          y_speed  = 0;
          x_spd    = 0;
          y_spd    = 0;
          xd_speed = 0;
          yd_speed = 0;
          gravity  = 0.241;       
       }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
