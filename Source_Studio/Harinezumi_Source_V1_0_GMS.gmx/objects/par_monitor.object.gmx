<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_monitor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

 // Movement:
    is_bumped = false;
    y_speed   = 0;
    y_gravity = 0.21875;

 // Collision:
    collision = instance_create(x, y, obj_monitor_collision);

 // Animation:
    icon_border_frame = 0;
    icon_frame        = 0;
    static_frame      = 0;
    static_delay      = 32;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create broken monitor.
 
 // Create broken part:
    broken = instance_create(x, y, obj_monitor_broken);
    broken . icon_frame = icon_frame;
    broken . yy         = y-19;
    broken . y          = y-24;
    broken . parent     = parent;
    
 // Destroy collision.
    with(collision)
    {
         instance_destroy();
    }

 // Sound Effect:
    audio_play(_general_destroy, global.sfx_volume); 
    
 // Create explosion:
    dummy_effect_create(spr_monitor_explosion, 0.40, x, y-8, -5, 0);
    
 // Create shards:
    randomize();
    repeat(irandom_range(3, 6))
    {
           randomize();
           instance_create(x+random_range(-16, 16), y+random_range(-24, -16), obj_monitor_shard);
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gravity.

    if(is_bumped == true)
    {
       // Check for collision:
          repeat(abs(y_speed))
          {
                 if(!place_meeting(x, y+sign(y_speed), par_terrain))
                 {
                    y += sign(y_speed);
                 }
                 else
                 {
                    y_speed   = 0;
                    is_bumped = false;
                 }           
          }
       // Add Gravity:
          y_speed += y_gravity;
          if(y_speed &gt; 12)
          {
             y_speed = 12;
          }     
  }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Border Animation.

    icon_border_frame = current_time div 45;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision.

 // If not bumped, keep collision at monitor x/y.
    if(is_bumped == false)
    {
       collision.x = x;
       collision.y = y;
    }
    if(is_bumped == true)
    {
       collision.x = -1;
       collision.y = -1;            
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Monitor &amp; Icon.

 // Draw Monitor: 
    draw_sprite(spr_monitor, 0, x, y);
    
 // Draw Icon Border:
    draw_sprite(spr_monitor_icon_border, icon_border_frame, x, y-19)
    
 // Draw Icon:
    draw_sprite(spr_monitor_icon, icon_frame, x, y-19);
    
 // Draw Static.
    if(static_delay &gt; 0)
    {
       static_delay -= 1;
    }
    else
    {
       if(floor(static_frame) &lt; 20)
       {
          static_frame += 1;  
       }
       else
       {
          randomize();
          static_delay = irandom_range(32, 64);
          static_frame = 0;
       }
       draw_sprite(spr_monitor_static, static_frame, x, y-19);
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
