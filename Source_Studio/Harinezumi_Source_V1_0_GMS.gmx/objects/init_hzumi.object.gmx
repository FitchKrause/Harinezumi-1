<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hz_boot</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init.
    
 // Splash:
    controllers_initialized = false;
    if(file_exists(working_directory+"\data\disclaimer_skip.hzc")) // If the disclaimer has been shown before, skip it.
    {
       frame               = 1;
       time                = 45;
       alpha               = 1;
       background_color[0] = c_black;        
       visible             = true;       
    }
    else // We haven't seen the disclaimer yet, so show it.
    {
       frame               = 0;
       time                = 120;
       alpha               = 1;
       background_color[0] = c_white;        
       visible             = true;     
       _disclaimerSkip = file_text_open_write(working_directory+"\data\disclaimer_skip.hzc")  
                         {
                            file_text_write_string(_disclaimerSkip, "This file is used to skip the Frameworks disclaimer on boot.");
                         }
                         file_text_close(_disclaimerSkip); 
    }
    
    
 // Global:
    global.clives       = 3; // Character lives.
    global.crings       = 0; // Character rings.
    global.cscore       = 0; // Character Score.
    global.crings_check = 1; // Check for gaining lives when the ring counter hits * 100.
    global.cscore_mtp   = 0; // Score multiplier. 
    
 // Settings:
  
    if(file_exists(working_directory+"\data\config\screen.hzc") == false)
    {
       // Display:
          global.setting_display_scale      = 1; // The screen scale. (1 to 4)
          global.setting_display_fullscreen = 0; // Is the game in fullscreen?
          global.setting_display_vsync      = 0; // Is the game using vsync?
          global.setting_display_alt_sync   = 0; // Is the game using alt. sync? Only used in studio.
          global.setting_display_hud        = 1; // Whether or not to display the HUD.
          config_save_display();
    }
    else
    {
          global.setting_display_scale      = text_readline(working_directory+"\data\config\screen.hzc", false, 0);
          global.setting_display_fullscreen = text_readline(working_directory+"\data\config\screen.hzc", false, 1);
          global.setting_display_vsync      = text_readline(working_directory+"\data\config\screen.hzc", false, 2);
          global.setting_display_alt_sync   = text_readline(working_directory+"\data\config\screen.hzc", false, 4);
          global.setting_display_hud        = text_readline(working_directory+"\data\config\screen.hzc", false, 3);
    }
    
    if(file_exists(working_directory+"\data\config\audio.hzc") == false)
    {              
       // Sound:
          global.setting_music_vol = 1; // The volume for background music.
          global.setting_sound_vol = 1; // The volume for sound effects.
          global.setting_event_vol = 1; // The volume for events.          
          config_save_audio();          
    }
    else
    {
          global.setting_music_vol = text_readline(working_directory+"\data\config\audio.hzc", false, 0);
          global.setting_sound_vol = text_readline(working_directory+"\data\config\audio.hzc", false, 1);
          global.setting_event_vol = text_readline(working_directory+"\data\config\audio.hzc", false, 2);
    }
    
    if(file_exists(working_directory+"\data\config\input.hzc") == false)
    {        
       // Input:   
          global.setting_input_up               = 38;
          global.setting_input_down             = 40;
          global.setting_input_left             = 37;
          global.setting_input_right            = 39;
          global.setting_input_button_a         = 65;
          global.setting_input_button_b         = 83;
          global.setting_input_button_s         = 13;
          global.setting_input_gamepad_button_a = -1;
          global.setting_input_gamepad_button_b = -1;
          global.setting_input_gamepad_button_s = -1;     
          global.setting_input_gamepad_deadzone = 0.5;           
          config_save_input();
    }
    else
    {
          global.setting_input_up               = text_readline(working_directory+"\data\config\input.hzc", false, 0);
          global.setting_input_down             = text_readline(working_directory+"\data\config\input.hzc", false, 1);
          global.setting_input_left             = text_readline(working_directory+"\data\config\input.hzc", false, 2);
          global.setting_input_right            = text_readline(working_directory+"\data\config\input.hzc", false, 3);
          global.setting_input_button_a         = text_readline(working_directory+"\data\config\input.hzc", false, 4);
          global.setting_input_button_b         = text_readline(working_directory+"\data\config\input.hzc", false, 5);
          global.setting_input_button_s         = text_readline(working_directory+"\data\config\input.hzc", false, 6);          
          global.setting_input_gamepad_button_a = text_readline(working_directory+"\data\config\input.hzc", false, 7);
          global.setting_input_gamepad_button_b = text_readline(working_directory+"\data\config\input.hzc", false, 8);
          global.setting_input_gamepad_button_s = text_readline(working_directory+"\data\config\input.hzc", false, 9); 
          global.setting_input_gamepad_deadzone = text_readline(working_directory+"\data\config\input.hzc", false, 10);              
    }
    
    if(file_exists(working_directory+"\data\config\gameplay.hzc") == false)
    {        
       // Gameplay:
          global.setting_gameplay_spindash      = true;
          global.setting_gameplay_dropdash      = true;
          global.setting_gameplay_peelout       = false;
          global.setting_gameplay_instashield   = false;
          global.setting_gameplay_aerial_lock   = false;
          global.setting_gameplay_roll_trigger  = true;
          global.setting_gameplay_camera_lag    = true;
          global.setting_gameplay_rotation      = true;          
          global.setting_gameplay_time_over     = false;
          global.setting_gameplay_discord       = false;          
          config_save_gameplay();
    }
    else
    {
          global.setting_gameplay_spindash     = text_readline(working_directory+"\data\config\gameplay.hzc", false, 0);
          global.setting_gameplay_dropdash     = text_readline(working_directory+"\data\config\gameplay.hzc", false, 1);
          global.setting_gameplay_peelout      = text_readline(working_directory+"\data\config\gameplay.hzc", false, 2);
          global.setting_gameplay_instashield  = text_readline(working_directory+"\data\config\gameplay.hzc", false, 3);
          global.setting_gameplay_aerial_lock  = text_readline(working_directory+"\data\config\gameplay.hzc", false, 4);
          global.setting_gameplay_roll_trigger = text_readline(working_directory+"\data\config\gameplay.hzc", false, 5);
          global.setting_gameplay_camera_lag   = text_readline(working_directory+"\data\config\gameplay.hzc", false, 6);
          global.setting_gameplay_rotation     = text_readline(working_directory+"\data\config\gameplay.hzc", false, 7);                 
          global.setting_gameplay_time_over    = text_readline(working_directory+"\data\config\gameplay.hzc", false, 8);
          global.setting_gameplay_discord      = text_readline(working_directory+"\data\config\gameplay.hzc", false, 9);            
    }

      
 // Input (Keyboard):
    global.ip_up       = global.setting_input_up;
    global.ip_down     = global.setting_input_down;
    global.ip_left     = global.setting_input_left;
    global.ip_right    = global.setting_input_right;
    global.ip_button_a = global.setting_input_button_a;
    global.ip_button_b = global.setting_input_button_b;
    global.ip_button_s = global.setting_input_button_s;
    
 // Input (Gamepad):
    global.dip_button_a  = global.setting_input_gamepad_button_a;
    global.dip_button_b  = global.setting_input_gamepad_button_b;
    global.dip_button_s  = global.setting_input_gamepad_button_s;
    
 // Display:
    global.display_width      = 480;                               // Width of the Display Window.
    global.display_height     = 270;                               // Height of the Display Window.
    global.display_scale      = global.setting_display_scale;      // Scale of the display window. 
    global.display_fullscreen = global.setting_display_fullscreen; // Is the display window fullscreen?
    global.display_vsync      = global.setting_display_vsync;      // Is the game using vsync?
    global.display_alt_sync   = global.setting_display_alt_sync;   // Is the game using alt sync? (Only in studio)
    global.display_hud        = global.setting_display_hud;        // Is the game displaying the HUD?
    
 // Audio:
    global.bgm_volume = global.setting_music_vol; // Volume for Music tracks.
    global.sfx_volume = global.setting_sound_vol; // Volume for Sound effects.
    global.ev_volume  = global.setting_event_vol; // Volume for events.
    global.ring_pan   = 1;                        // Pan of the ring sound.
    
 // Fonts:
    global.font_hud_number    = font_add_sprite(spr_hud_numbers, ord("0"), false, -1);
    global.font_hud_titlecard = font_add_sprite(fnt_hud_titlecard, ord("A"), true, 0);
    global.font_main          = font_add_sprite(fnt_main, ord("!"), true , 0);
    global.font_debug         = font_add_sprite(fnt_debug, ord("!"), false, 0);

 // Level:
    global.zone_name              = ""; // The name of the zone.
    global.zone_act               =  1; // The act of the zone. (1 to 2)
    global.zone_water_position    = -1; // The water surface position. (-1 deactivates water)
    global.death_trigger_position = -1; // Position used to kill the character.       
    global.checkpoint_x           = -1; // X position for checkpoint respawning.
    global.checkpoint_y           = -1; // Y position for checkpoint respawning.
    global.checkpoint_t           =  0; // Time before we hit the checkpoint.
    global.character_handle       = noone;
    global.cpu_handle             = noone;
    global.character_index        =  0; // The character index. (Human Player)
    global.cpu_index              =  0; // The character index. (CPU Player)
    
 // Set Window.
    alarm[0] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center Window.

    window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change Display config.

 // Scale:
    if(global.display_fullscreen == false)
    {
       window_set_size(global.display_width * global.display_scale, global.display_height * global.display_scale)
       if(window_get_fullscreen() == true)
       {
          window_set_fullscreen(false);
       }
       alarm[1] = 5;
    }
    else
    {
       window_set_size(global.display_width, global.display_height)    
       window_set_fullscreen(true);
    }
    
 // VSync:
    display_reset(0, global.display_vsync);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Splash Fade.
    
    if(frame == 0 &amp;&amp; time &gt; 0)
    {
       time -= 1;
    }
    else if(frame == 0 &amp;&amp; time &lt;= 0)
    {
            if(alpha &gt; 0)
            {
               alpha -= 0.15;
            }
            else
            {
               frame = 1;
               time  = 25;
            }
    }

    if(frame == 1)
    {
       if(controllers_initialized == false)
       {
          // Initialize controllers.
             instance_create(0, 0, ctr_audio);
             instance_create(0, 0, ctr_gamepad);
             controllers_initialized = true;      
       }
       if(alpha &lt; 1 &amp;&amp; time &gt; 0)
       {
          alpha += 0.15;
       }
       else
       {
          background_color[0] = c_black;
          if(time &gt; 0)
          {
             time -= 1;
          }
          else
          {
            if(alpha &gt; 0)
            {
               alpha -= 0.025;
            }
            else
            {
               room_goto_next();
            }
          }
       }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Splash.

    draw_sprite_ext(sprite_index, frame, x, y, 1, 1, 0, c_white, alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
