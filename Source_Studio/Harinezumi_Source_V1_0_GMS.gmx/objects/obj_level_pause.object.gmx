<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9000001</depth>
  <persistent>0</persistent>
  <parentName>ctr_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.
 
    // Create a snapshot of the view.  
    pause_sprite    = background_create_from_surface(application_surface, 0, 0, 480, 270, 0, 0);
    
    pause_mode      = 0;     // Mode of the pause menu. (0 = Open, 1 = Exit)
    pause_x         = 0;     // The horizontal position of a option.
    pause_xs        = 280;   // Used to shift the pause elements on screen.
    pause_xs_v      = 0;     // ^^
    pause_y         = 270/2; // The vertical position of a option.
    
 // Create position variables:
    for(i=0; i&lt;4; i+=1)
    {
       pause_ys[i] = 0;
       pause_yd[i] = 0;
    }
     
    option_selected = 0;     // Which option is highlighted?
    option_delay    = 0;     // How long we cannot do any inputs on the menu.
    option_paused   = 0;     // Fully stops input on the menu.
    alpha           = 0;     // Alpha for the selection highlight.
    overlay_alpha   = 0;     // Alpha for the overlay.
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alpha timer.

    alpha += 1000/60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Instance activation.

    instance_activate_object(ctr_level);
    instance_activate_object(ctr_gamepad);
    instance_activate_object(ctr_audio);
    instance_activate_object(obj_menu_transition); 
    instance_activate_object(obj_m_menu_options);     
    instance_activate_object(obj_fade_to);           
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change / select option.
    
 // Delay.
    if(option_delay &gt; 0)
    {
       option_delay -= 1;
    }
 
 // Exit:
    if(instance_exists(obj_fade_in) || instance_exists(obj_fade_to) || option_paused == true || option_delay &gt; 0) exit;
 
 // Change option:
    if(keyboard_check_pressed(global.ip_down) || (joy_hat_y(0) = 1 &amp;&amp; GMP.dpad_down == 0))
    {
       option_selected += 1;
       option_selected = wrap_value(option_selected, 0, 4);           
       pause_ys[option_selected] = -8;
       if(audio_is_playing(_general_menu_bleep) == true)
       {
          audio_stop(_general_menu_bleep);
       }
       audio_play(_general_menu_bleep, global.sfx_volume);            
    }
    if(keyboard_check_pressed(global.ip_up) || (joy_hat_y(0) = -1 &amp;&amp; GMP.dpad_up == 0))
    {
       option_selected -= 1;
       option_selected = wrap_value(option_selected, 0, 4);       
       pause_ys[option_selected] = -8;
       if(audio_is_playing(_general_menu_bleep) == true)
       {
          audio_stop(_general_menu_bleep);
       }
       audio_play(_general_menu_bleep, global.sfx_volume);       
    }

    
 // Select option:
    if(keyboard_check_pressed(global.ip_button_a) || (joy_pressed(0, global.dip_button_a)))
    {
       // Unpause:
          if(option_selected == 0)
          {
             if(pause_mode == 0)
             {
                instance_activate_all();     
                option_paused = true;                         
                pause_mode    = 1;
                pause_xs_v    = 280;
                pause_sprite  = noone;
                audio_resume_all();   
                if(audio_is_playing(_general_menu_accept) == true)
                {
                   audio_stop(_general_menu_accept);
                }    
                audio_play(_general_menu_accept, global.sfx_volume);                 
             }
          }
          
       // Restart:
          if(option_selected == 1)
          {
             option_paused = true;
             with(instance_create(0, 0, obj_fade_to))
             {
                  fade_to = room;
             }
             if(audio_is_playing(_general_menu_accept) == true)
             {
                audio_stop(_general_menu_accept);
             }    
             audio_play(_general_menu_accept, global.sfx_volume);  
             global.checkpoint_x = -1; 
             global.checkpoint_y = -1;
             global.checkpoint_t =  0;                     
          }
          
       // Setting:
          if(option_selected == 2)
          {
             option_paused = true;
             with(instance_create(0, 0, obj_menu_transition))
             {
                  transition_event = 1
             }
             if(audio_is_playing(_general_menu_woosh) == true)
             {
                audio_stop(_general_menu_woosh);
             }    
             audio_play(_general_menu_woosh, global.sfx_volume);                
          } 
          
       // Exit:
          if(option_selected == 3)
          {
             option_paused = true;
             with(instance_create(0, 0, obj_fade_to))
             {
                  fade_to = rm_menu;
             }
             if(audio_is_playing(_general_menu_accept) == true)
             {
                audio_stop(_general_menu_accept);
             }    
             audio_play(_general_menu_accept, global.sfx_volume);  
             global.checkpoint_x = -1; 
             global.checkpoint_y = -1;
             global.checkpoint_t =  0;            
          }                   
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Pause menu.

 // Destroy:
    if(pause_mode == 1 &amp;&amp; pause_xs &gt; pause_xs_v-1)
    {  
       instance_destroy();
    }
        
 // Draw Snapshot:    
    if(pause_sprite != noone)
    {
       draw_background(pause_sprite,view_xview, view_yview);
    }
    
 // Create a slightly dark overlay.
    draw_set_color(c_black);
    draw_set_alpha(overlay_alpha);
    draw_rectangle(view_xview, view_yview, view_xview+view_wview, view_yview+view_hview, false);
    draw_set_color(c_white);
    draw_set_alpha(1);
 
 // Overlay alpha.
    if(pause_mode == 0)
    {
       overlay_alpha += (0.5-overlay_alpha)*0.05;
    }
    else
    {
       overlay_alpha += (0-overlay_alpha)*0.05;
    }
    
 // Draw the upper corner.
    draw_sprite(spr_pause_menu_upper, 0, view_xview-pause_xs, view_yview);
    
 // Draw the selection menu:
    pause_center = floor((view_yview+view_hview/2)-(((27+16*4)/2)));
    draw_sprite(spr_pause_menu_backdrop, 0, ((view_xview+view_wview-sprite_get_width(spr_pause_menu_backdrop)+pause_xs)), view_yview)
    for(i=0; i&lt;4; i+=1)
    {
        pause_ys[i] += (0-pause_ys[i])*0.1;
        if(option_selected == i)
        {
           pause_yd[i] += (4-pause_yd[i])*0.25;
        }
        else
        {
           pause_yd[i] += (0-pause_yd[i])*0.25;
        }
        draw_sprite_ext(spr_pause_menu_options_backdrop, i, ((view_xview+view_wview-sprite_get_width(spr_pause_menu_options)-16+pause_xs)+pause_yd[i])-i*34, (pause_center+(i*(27+16)))-pause_ys[i]+pause_yd[i], 1, 1, 0, make_color_rgb(181, 0, 0), 1);    
        draw_sprite_ext(spr_pause_menu_options_backdrop, i, ((view_xview+view_wview-sprite_get_width(spr_pause_menu_options)-16+pause_xs)+pause_yd[i])-i*34, (pause_center+(i*(27+16)))-pause_ys[i]+pause_yd[i], 1, 1, 0, make_color_rgb(231, 178, 231), abs(sin(alpha/150)));              
        draw_sprite_ext(spr_pause_menu_options_backdrop, i, (view_xview+view_wview-sprite_get_width(spr_pause_menu_options)-16+pause_xs)-i*34, (pause_center+(i*(27+16)))-pause_ys[i], 1, 1, 0, make_color_rgb(0, 0, 0), 1);
        draw_sprite(spr_pause_menu_options, i, (view_xview+view_wview-sprite_get_width(spr_pause_menu_options)-16+pause_xs)-i*34, (pause_center+(i*(27+16)))+pause_ys[i]);
    }

    pause_xs += (pause_xs_v-pause_xs)*0.25;
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
