<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>par_menu_0</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.
 
 // Selection:
    menu_selection             = 0;  // Set the selection. (0 = DEMO, 1 = OPTIONS, 2 = CREDITS, 3 = EXIT)
    menu_selection_frame       = 0;  // Sprite frame used. Changes for a second when pressing left or right. 
    menu_selection_frame_timer = 0;  // How long a frame stays until it resets back to frame 0.
    menu_selection_freeze      = 30; // How long it's not possible to do anything on the menu. Use -1 to keep the menu input disabled. (For fading out or other things)
    
   
 // Text / Descriptions:
    text = ""   // Text used for the main menu's option description.
    t_x  = 50;  // The horizontal position of the option description.
    t_y  = 248; // The vertical position of the option description.
    
 // Misc:
    image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Selection.

 // Only run when not frozen:
    if(menu_selection_freeze == 0)
    {
       // When pressing left...
          if(keyboard_check_pressed(global.ip_left) || (joy_hat_x(0) = -1 &amp;&amp; GMP.dpad_left == 0))
          {
             if(menu_selection == 0)
             {
                menu_selection = 3;
             }
             else
             {
                menu_selection -= 1;
             }
             menu_selection_frame       = 1;
             menu_selection_frame_timer = 5;
             t_x                        = 128;
             if(audio_is_playing(_general_menu_bleep) == true)
             {
                audio_stop(_general_menu_bleep);
             }
             audio_play(_general_menu_bleep, global.sfx_volume);
          }
    
       // When pressing right...
          if(keyboard_check_pressed(global.ip_right) || (joy_hat_x(0) = 1 &amp;&amp; GMP.dpad_right == 0))
          {
             if(menu_selection == 3)
             {
                menu_selection = 0;
             }
             else
             {
                menu_selection += 1;
             }
             menu_selection_frame       = 2;
             menu_selection_frame_timer = 5;
             t_x                        = 128;    
             if(audio_is_playing(_general_menu_bleep) == true)
             {
                audio_stop(_general_menu_bleep);
             }
             audio_play(_general_menu_bleep, global.sfx_volume);        
             
          }
    
       // Change character.
          if(keyboard_check_pressed(global.ip_button_b) || (joy_pressed(0, global.dip_button_b)))
          {
            if(menu_selection == 0)
            {
               if(global.character_index == 0)
               {
                   global.character_index = 1;
                   audio_play(_general_menu_vo_tails, global.sfx_volume);
               }
               else if(global.character_index == 1)
               {
                       global.character_index = 2;
                       audio_play(_general_menu_vo_knuckles, global.sfx_volume);
               }
               else if(global.character_index == 2)
               {
                       global.character_index = 0;
                       audio_play(_general_menu_vo_sonic, global.sfx_volume);
               }
               if(global.character_index &gt; 2) global.character_index = 0;
            }
          }
       
       // Frame timer.
          if(menu_selection_frame_timer &gt; 0)
          {
             menu_selection_frame_timer -= 1;
          }
          else
          {
             menu_selection_frame = 0;
          }
    }
    
 // Menu Selection:
    if(menu_selection_freeze == 0)
    {
       if(keyboard_check_pressed(global.ip_button_a) || (joy_pressed(0, global.dip_button_a)))
       {
          switch(menu_selection)
          {
                case 0: // Go to the demo stage.
                {
                     if(instance_exists(obj_fade_to) == false)
                     {
                        with(instance_create(0, 0, obj_fade_to))
                        {
                             fade_to = rm_test_stage;
                             global.clives       =  3;
                             global.crings       =  0;
                             global.cscore       =  0;
                             global.crings_check =  1;
                             global.cscore_mtp   =  0;
                             global.checkpoint_t =  0;
                             global.checkpoint_x = -1;
                             global.checkpoint_y = -1;
                             
                        }
                        menu_selection_freeze = -1;
                     }
                     break;
                }
                case 1: // Open the settings menu.
                {
                     with(instance_create(0, 0, obj_menu_transition))
                     {
                          transition_event = 1;
                     }
                     menu_selection_freeze = -1;  
                     if(audio_is_playing(_general_menu_woosh) == true)
                     {
                         audio_stop(_general_menu_woosh);
                     } 
                     audio_play(_general_menu_woosh, global.sfx_volume);                                                
                     break;
                }       
                case 2: // Go to the credits.
                {
                     with(instance_create(0, 0, obj_menu_transition))
                     {
                          transition_event = 2;
                     }
                     menu_selection_freeze = -1;  
                     if(audio_is_playing(_general_menu_woosh) == true)
                     {
                         audio_stop(_general_menu_woosh);
                     } 
                     audio_play(_general_menu_woosh, global.sfx_volume);                                                
                     break;
                }   
                case 3: // Exit the game.
                {
                     if(instance_exists(obj_fade_to) == false)
                     {
                        with(instance_create(0, 0, obj_fade_to))
                        {
                             fade_to = -1;
                        }
                        menu_selection_freeze = -1;
                     }
                     break;
                }                                            
          }
       }
    }
    
 // Freeze timer.
    if not(menu_selection_freeze &lt;= 0)
    { 
           menu_selection_freeze -= 1;
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drawing.
 
 // Draw Text bar:
    draw_sprite(spr_m_menu_text_bar, -1, 0, view_yview+view_hview-sprite_get_height(spr_m_menu_text_bar));

 // Text Scrolling effect.
    if(t_x &lt; 0-string_width(text))
    { 
       t_x = 200;  
    }
  
 // Set text:
    if(menu_selection == 0)
    {
       text = "Play the Demo stage.";
    }
    if(menu_selection == 1)
    {
       text = "Change various Game Settings.";
    }    
    if(menu_selection == 2)
    {
       text = "Check who made this Framework possible! (Use Up/Down to move text)";
    }
    if(menu_selection == 3)
    {
       text = "Close the game.";
    }   
        
 // Draw text:
    draw_set_color(c_white);
    draw_set_font(global.font_main);
    draw_set_halign(fa_left);
    draw_text(t_x, t_y, text)
    draw_set_halign(-1);
    
 // Move text.
    t_x -= 1;
       
 // Draw the Selection backdrop.
    draw_sprite(spr_m_menu_selection, menu_selection_frame, view_xview+view_wview-sprite_get_width(spr_m_menu_selection), view_yview+view_hview-sprite_get_height(spr_m_menu_selection));

 // Draw character select message.
    if(menu_selection == 0)
    {
       draw_sprite(spr_m_menu_selection, 3, view_xview+view_wview-sprite_get_width(spr_m_menu_selection), view_yview+view_hview-sprite_get_height(spr_m_menu_selection));
    }
 // Draw the Selection option.
    draw_sprite(spr_m_menu_selection_options, menu_selection, view_xview+348, view_yview+232); 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
