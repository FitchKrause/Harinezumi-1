<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_signpost</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.
 
    sign_post_camera    = instance_create(x, y-80, obj_sign_post_camera); 
    sign_post_activated = false;
    sign_post_duration  = 128;
    sign_post_timer     = 2;
    sign_post_finished  = false;
    image_speed         = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Everything.
 
 // Exit.
    if(sign_post_finished == true) exit;
    
 // Set camera.
    if(bbox_right  &gt; view_xview
    &amp;&amp; bbox_left   &lt; view_xview + view_wview
    &amp;&amp; bbox_bottom &gt; view_yview
    &amp;&amp; bbox_top    &lt; view_yview + view_hview)   
    {
       with(ctr_camera)
       {
            cam_handle  = other.sign_post_camera;
            limit_left  = other.sign_post_camera.x-view_wview/2;
            limit_right = other.sign_post_camera.x+view_wview/2;
       }
    }
    
 // Spin. 
    if(sign_post_activated == true)
    {
       if(sign_post_duration != 0)
       {
          if(sign_post_timer != 0)
          {
             sign_post_timer -= 1;
          }
          else
          {
             sign_post_timer  = 2;
             image_index     += 1
             if(sign_post_duration mod 4 == 0)
             {
                dummy_effect_create(choose(spr_ring_sparkle_01, spr_ring_sparkle_02, spr_ring_sparkle_03), 0.5, x-24+(irandom_range(0, 3)*16), y-48+(irandom_range(0, 2)*16), -1, 0);
             }
          }
       }
       else // Finish.
       {
          if(instance_exists(obj_results) == false)       
          {
             sign_post_finished = true;          
             image_index        = (global.character_index+1)*4;
             instance_create(x, y, obj_results);
          }
       }       
       sign_post_duration -= 1;
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Trigger by jumping above.

    if(instance_exists(par_character))
    {
       char = instance_nearest(x, y, par_character);
       if(char != noone &amp;&amp; char.x &gt; x)
       {
          if(sign_post_activated == false)
          {
             // Activate and play sound.
                sign_post_activated = true;
                audio_play(_general_sign_post, global.sfx_volume);
                    
             // Disable timer.
                global.add_time = 0;       
          
             // Reset checkpoint.
                global.checkpoint_x = -1;
                global.checkpoint_y = -1;
                global.checkpoint_t =  0;
          }   
       }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_character">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Trigger.

    if(sign_post_activated == false)
    {
       // Activate and play sound.
          sign_post_activated = true;
          audio_play(_general_sign_post, global.sfx_volume);
                    
       // Disable timer.
          global.add_time = 0;       
          
       // Reset checkpoint.
          global.checkpoint_x = -1;
          global.checkpoint_y = -1;
          global.checkpoint_t =  0;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
