<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9000002</depth>
  <persistent>0</persistent>
  <parentName>par_menu_1</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

    option_selected         = 0;
    option_in_page          = false;
    option_selected_in_page = 0;
    
 // Background:
    background_scroll[0] = 0;
    background_scroll[1] = 0;
    background_scroll[2] = 0;
    _y                   = 0;
    
    
 // Pages:
    page_x        = 0;
    page_y        = view_yview+view_hview/2;
    total_height  = 0;
    page_x_pan    = 480;
    page_selected = 0;
 
 // Option misc.
    option_string_description = "";
    option_value_timer        = 30;
    option_change_timer       = 0;
    option_change_mode        = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center screen. (For GMS)
  
    window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change Display config.

 // Scale:
    if(global.display_fullscreen == false)
    {
       window_set_size(global.display_width * global.display_scale, global.display_height * global.display_scale)
       if(window_get_fullscreen() == true)
       {
          window_set_fullscreen(false);
       }
       alarm[1] = 5;
    }
    else
    {
       window_set_size(global.display_width, global.display_height)    
       window_set_fullscreen(true);
    }
    
 // VSync:
    display_reset(0, global.display_vsync);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input changing timer.

   if(option_change_timer &gt; 0)
   {
      option_change_timer -= 1;
   }
   else
   {
       option_change_timer = 0;
   }


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Selection.
   
 // Change Selection:
    if(instance_exists(obj_menu_transition) == false &amp;&amp; option_in_page == false)
    {
     
    if(option_selected == 0)
    {
       if(keyboard_check_pressed(global.ip_right) || (joy_hat_x(0) = 1 &amp;&amp; GMP.dpad_right == 0))
       {
          option_selected = 1; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);          
       }
       if(keyboard_check_pressed(global.ip_left) || (joy_hat_x(0) = -1 &amp;&amp; GMP.dpad_left == 0))
       {
          option_selected = 3; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);          
       }       
       if(keyboard_check_pressed(global.ip_down) || (joy_hat_y(0) = 1 &amp;&amp; GMP.dpad_down == 0))
       {
          option_selected = 2; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);          
       }    
       if(keyboard_check_pressed(global.ip_up) || (joy_hat_y(0) = -1 &amp;&amp; GMP.dpad_up == 0))
       {
          option_selected = 2; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);          
       }      
               
    }
    else
    if(option_selected == 1)
    {
       if(keyboard_check_pressed(global.ip_right) || (joy_hat_x(0) = 1 &amp;&amp; GMP.dpad_right == 0))
       {
          option_selected = 2; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);          
       }
       if(keyboard_check_pressed(global.ip_left) || (joy_hat_x(0) = -1 &amp;&amp; GMP.dpad_left == 0))
       {
          option_selected = 0;
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);           
       }       
       if(keyboard_check_pressed(global.ip_down) || (joy_hat_y(0) = 1 &amp;&amp; GMP.dpad_down == 0))
       {
          option_selected = 3; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);          
       }      
       if(keyboard_check_pressed(global.ip_up) || (joy_hat_y(0) = -1 &amp;&amp; GMP.dpad_up == 0))
       {
          option_selected = 3; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);          
       }            
    }  
    else 
    if(option_selected == 2)
    {
       if(keyboard_check_pressed(global.ip_right) || (joy_hat_x(0) = 1 &amp;&amp; GMP.dpad_right == 0))
       {
          option_selected = 3; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);          
       }
       if(keyboard_check_pressed(global.ip_left) || (joy_hat_x(0) = -1) &amp;&amp; GMP.dpad_left == 0)
       {
          option_selected = 1; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);          
       }       
       if(keyboard_check_pressed(global.ip_down) || (joy_hat_y(0) = 1 &amp;&amp; GMP.dpad_down == 0))
       {
          option_selected = 0;
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);           
       }    
       if(keyboard_check_pressed(global.ip_up) || (joy_hat_y(0) = -1 &amp;&amp; GMP.dpad_up == 0))
       {
          option_selected = 0; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);          
       }              
    }   
    else     
    if(option_selected == 3)
    {
       if(keyboard_check_pressed(global.ip_right) || (joy_hat_x(0) = 1 &amp;&amp; GMP.dpad_right == 0))
       {
          option_selected = 0;
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);           
       }
       if(keyboard_check_pressed(global.ip_left) || (joy_hat_x(0) = -1 &amp;&amp; GMP.dpad_left == 0))
       {
          option_selected = 2; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);          
       }       
       if(keyboard_check_pressed(global.ip_down) || (joy_hat_y(0) = 1 &amp;&amp; GMP.dpad_down == 0))
       {
          option_selected = 1; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);          
       }     
       if(keyboard_check_pressed(global.ip_up) || (joy_hat_y(0) = -1 &amp;&amp; GMP.dpad_up == 0))
       {
          option_selected = 1; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);          
       }             
    }        
    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Exit to Main Menu.

    if(option_in_page == false &amp;&amp; option_change_mode == 0 &amp;&amp; option_change_timer == 0)
    {
    
    if(keyboard_check_pressed(global.ip_button_b) || joy_pressed(0, global.dip_button_b))
    {
       if(instance_exists(obj_menu_transition) == false)
       {
          if(instance_exists(obj_level_pause) == false)
          {
             with(instance_create(0, 0, obj_menu_transition))
             {
                  transition_event = 0;
             }
          }
          else
          {
             with(instance_create(0, 0, obj_menu_transition))
             {
                  transition_event = 3;
             }          
          }
          if(audio_is_playing(_general_menu_woosh) == true)
          {
             audio_stop(_general_menu_woosh);
          } 
          audio_play(_general_menu_woosh, global.sfx_volume);            
       }
    }
    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Background scroll.

    background_scroll[0] -= 0.40;
    background_scroll[1] -= 0.50;
    background_scroll[2] -= 0.70;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw.

 // Draw Sky:
    draw_set_color(make_color_rgb(220, 129, 255))
    draw_rectangle(0, 0, view_xview+view_wview, view_yview+view_hview, false);
    draw_set_color(c_white);
    draw_sprite_tiled_horizontal(spr_s_menu_parallax_01, 0, view_xview + background_scroll[0], view_yview+161, 1, 1, 0, c_white, 1);
    draw_sprite_tiled_horizontal(spr_s_menu_parallax_02, 0, view_xview + background_scroll[1], view_yview+204, 1, 1, 0, c_white, 1);
    draw_sprite_tiled_horizontal(spr_s_menu_parallax_03, 0, view_xview + background_scroll[2], view_yview+228, 1, 1, 0, c_white, 1);        

 // Draw Backdrop:
    draw_sprite(spr_s_menu_backdrop, 0, view_xview+0, view_yview+0);
    draw_sprite(spr_s_menu_backdrop, 1, view_xview+0, view_yview+0+_y); 
    
 // Draw (Display) Box:    
    draw_sprite(spr_s_menu_selection_box, (option_selected==0), view_xview+54, view_yview+17+_y);
    draw_sprite(spr_s_menu_selection_options, 0, view_xview+56, view_yview+19+_y);
    if(option_selected == 0)
    {
       draw_sprite(spr_s_menu_selection_icons, 0, view_xview+55, view_yview+54+_y);
    }
    else
    {
       draw_sprite(spr_s_menu_selection_static, current_time div 64, view_xview+55, view_yview+54+_y);
    }
    
 // Draw (Audio) Box:
    draw_sprite(spr_s_menu_selection_box, (option_selected==1), view_xview+294, view_yview+17+_y);
    draw_sprite(spr_s_menu_selection_options, 1, view_xview+296, view_yview+19+_y);
    if(option_selected == 1)
    {    
       draw_sprite(spr_s_menu_selection_icons, 1, view_xview+295, view_yview+54+_y);     
    }
    else
    {
       draw_sprite(spr_s_menu_selection_static, current_time div 64, view_xview+295, view_yview+54+_y); 
    }
        
 // Draw (Input) Box:
    draw_sprite(spr_s_menu_selection_box, (option_selected==2), view_xview+54, view_yview+151+_y);
    draw_sprite(spr_s_menu_selection_options, 2, view_xview+56, view_yview+153+_y);
    if(option_selected == 2)
    {    
       draw_sprite(spr_s_menu_selection_icons, 2, view_xview+55, view_yview+188+_y); 
    }
    else
    {
       draw_sprite(spr_s_menu_selection_static, current_time div 64, view_xview+55, view_yview+188+_y); 
    }    
    
 // Draw (Gameplay) Box:
    draw_sprite(spr_s_menu_selection_box, (option_selected==3), view_xview+294, view_yview+151+_y);    
    draw_sprite(spr_s_menu_selection_options, 3, view_xview+296, view_yview+153+_y);
    if(option_selected == 3)
    {    
       draw_sprite(spr_s_menu_selection_icons, 3, view_xview+295, view_yview+188+_y);
    }
    else
    { 
       draw_sprite(spr_s_menu_selection_static, current_time div 64, view_xview+295, view_yview+188+_y); 
    }          
    
 // Move everything when we open a options page.
    if(option_in_page == true)
    {
       _y += (270-_y)*0.1;
    }
    else
    {
       _y += (0-_y)*0.1;    
    }
    
 // Page Name:
    draw_sprite(spr_s_menu_selection_options, option_selected, floor(view_xview+view_wview/2-sprite_get_width(spr_s_menu_selection_options)/2), view_yview-270+_y+8);
        
 // Change page.
    if(keyboard_check_pressed(global.ip_button_a) || joy_pressed(0, global.dip_button_a)) 
    {
       if(option_in_page == false)
       {
          option_in_page      = true;
          option_change_mode  = 0; 
          option_change_timer = 60;      
          if(audio_is_playing(_general_menu_accept) == true)
          {
             audio_stop(_general_menu_accept);
          }
          audio_play(_general_menu_accept, global.sfx_volume);         
       }
    }
    if(keyboard_check_pressed(global.ip_button_b) || joy_pressed(0, global.dip_button_b)) 
    {
       if(option_in_page == true &amp;&amp; option_change_mode == 0 &amp;&amp; option_change_timer == 0)  
       {  
          option_change_mode      = 0;
          option_change_timer     = 30;
          option_selected_in_page = 0;
          option_in_page          = false;  
          config_save_display();
          config_save_audio();
          config_save_input();
          config_save_gameplay();
          alarm[0]                = 5;    
          if(audio_is_playing(_general_menu_accept) == true)
          {
             audio_stop(_general_menu_accept);
          }
          audio_play(_general_menu_accept, global.sfx_volume);                             
       }
    } 

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Display Menu.
    
    if(option_in_page == true)
    { 
        // Options:
            if(option_selected == 0)
            {        
               total_height = (5*14)+8;
            } 
            if(option_selected == 1)
            {        
               total_height = (4*14)+8;
            }  
            if(option_selected == 2)
            {        
               total_height = (13*14)+8;
            }  
            if(option_selected == 3)
            {        
               total_height = (11*14)+8;
            }                           
            page_x_pan += (0-page_x_pan)*0.1;
            if(page_x_pan &lt; 0)
            {  
              page_x_pan = 0;
            }         
    }
    else
    {
        page_x_pan += (480-page_x_pan)*0.5;
    }
 
   
 // Update page position.
    page_y = view_yview+view_hview/2;
    
 // Page Backdrop:
    draw_set_color(make_color_rgb(49, 162, 247));
    draw_rectangle(view_xview+page_x+page_x_pan, page_y-total_height/2, view_xview+page_x+page_x_pan+480, ((page_y-total_height/2)+total_height), false);
    draw_set_color(c_white);    
 
 // Draw text:
    draw_set_color(c_white);
    draw_set_font(global.font_main);
    draw_set_halign(fa_left);
    if(option_selected == 0)
    {
       draw_text_color_selected(floor((view_xview+(page_x+32)+page_x_pan)), (page_y-total_height/2)+12, "Screen Scale",   (option_selected_in_page==0), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan),   (page_y-total_height/2)+12+16, "Fullscreen",  (option_selected_in_page==1), c_yellow, c_white);    
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan),   (page_y-total_height/2)+12+16*2, "VSync",     (option_selected_in_page==2), c_yellow, c_white);   
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan),   (page_y-total_height/2)+12+16*3, "Level HUD", (option_selected_in_page==3), c_yellow, c_white);          
       framework_option_display();   
       option_selected_in_page = wrap_value(option_selected_in_page, 0, 4);          
    }
    if(option_selected == 1)
    {
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12, "Music Volume",    (option_selected_in_page==0), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16, "Sound Volume", (option_selected_in_page==1), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*2, "Event Volume", (option_selected_in_page==2), c_yellow, c_white);           
       framework_option_audio();          
       option_selected_in_page = wrap_value(option_selected_in_page, 0, 3);           
    }   
    if(option_selected == 2)
    {
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12, "Up",                 (option_selected_in_page==0), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16, "Down",            (option_selected_in_page==1), c_yellow, c_white); 
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*2, "Left",          (option_selected_in_page==2), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*3, "Right",         (option_selected_in_page==3), c_yellow, c_white);  
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*4, "A",             (option_selected_in_page==4), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*5, "B",             (option_selected_in_page==5), c_yellow, c_white);   
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*6, "Start",         (option_selected_in_page==6), c_yellow, c_white);  
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*7, "Gamepad A",     (option_selected_in_page==7), c_yellow, c_white);   
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*8, "Gamepad B",     (option_selected_in_page==8), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*9, "Gamepad Start", (option_selected_in_page==9), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*10, "Analog Deadzone", (option_selected_in_page==10), c_yellow, c_white);       
       framework_option_input();        
       option_selected_in_page = wrap_value(option_selected_in_page, 0, 11);                                               
    } 
    if(option_selected == 3)
    {
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12,     "Spindash",               (option_selected_in_page==0), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16,  "Dropdash",               (option_selected_in_page==1), c_yellow, c_white); 
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*2, "Peel-Out",              (option_selected_in_page==2), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*3, "Insta-Shield",          (option_selected_in_page==3), c_yellow, c_white);   
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*4, "Aerial Roll Lock",      (option_selected_in_page==4), c_yellow, c_white);   
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*5, "Ground Roll Trigger",   (option_selected_in_page==5), c_yellow, c_white);  
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*6, "Camera Lag",            (option_selected_in_page==6), c_yellow, c_white);   
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*7, "Rotation Method",       (option_selected_in_page==7), c_yellow, c_white);         
       draw_text_color_selected(floor((view_xview+page_x+32)+page_x_pan), (page_y-total_height/2)+12+16*8, "Time Over",             (option_selected_in_page==8), c_yellow, c_white);             
       framework_option_gameplay();
       option_selected_in_page = wrap_value(option_selected_in_page, 0, 9);         
    }       
    
 // Option Values:       
    draw_set_halign(fa_right);
    if(option_selected == 0)
    { 
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12,      global.display_scale,                                                     (option_selected_in_page==0), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16,   string_change_if(global.display_fullscreen, 1, "Enabled", 0, "Disabled"), (option_selected_in_page==1), c_yellow, c_white);    
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*2, string_change_if(global.display_vsync, 1, "Enabled", 0, "Disabled"),      (option_selected_in_page==2), c_yellow, c_white);        
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*3, string_change_if(global.display_hud, 1, "Enabled", 0, "Disabled"),        (option_selected_in_page==3), c_yellow, c_white);
    }
    if(option_selected == 1)
    { 
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12,      string(max(floor(SFX.backup_bgm_volume*100),min(0))) + "%", (option_selected_in_page==0), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16,   string(max(floor(global.sfx_volume*100),min(0))) + "%", (option_selected_in_page==1), c_yellow, c_white); 
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*2, string(max(floor(global.ev_volume*100),min(0))) + "%", (option_selected_in_page==2), c_yellow, c_white);                         
    }  
    if(option_selected == 2)
    { 
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12,      global.ip_up,        (option_selected_in_page==0), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16,   global.ip_down,      (option_selected_in_page==1), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*2, global.ip_left,      (option_selected_in_page==2), c_yellow, c_white);  
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*3, global.ip_right,     (option_selected_in_page==3), c_yellow, c_white);    
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*4, global.ip_button_a,  (option_selected_in_page==4), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*5, global.ip_button_b,  (option_selected_in_page==5), c_yellow, c_white);     
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*6, global.ip_button_s,  (option_selected_in_page==6), c_yellow, c_white);  
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*7, global.dip_button_a, (option_selected_in_page==7), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*8, global.dip_button_b, (option_selected_in_page==8), c_yellow, c_white);     
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*9, global.dip_button_s, (option_selected_in_page==9), c_yellow, c_white);       
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*10, global.setting_input_gamepad_deadzone, (option_selected_in_page==10), c_yellow, c_white);                                               
    } 
    if(option_selected == 3)
    { 
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12,      string_change_if(global.setting_gameplay_spindash,     true, "Enabled", false, "Disabled"), (option_selected_in_page==0), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16,   string_change_if(global.setting_gameplay_dropdash,     true, "Enabled", false, "Disabled"), (option_selected_in_page==1), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*2, string_change_if(global.setting_gameplay_peelout,      true, "Enabled", false, "Disabled"), (option_selected_in_page==2), c_yellow, c_white);  
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*3, string_change_if(global.setting_gameplay_instashield,  true, "Enabled", false, "Disabled"), (option_selected_in_page==3), c_yellow, c_white);    
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*4, string_change_if(global.setting_gameplay_aerial_lock,  true, "Enabled", false, "Disabled"), (option_selected_in_page==4), c_yellow, c_white);
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*5, string_change_if(global.setting_gameplay_roll_trigger, true, "Enabled", false, "Disabled"), (option_selected_in_page==5), c_yellow, c_white);     
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*6, string_change_if(global.setting_gameplay_camera_lag,   true, "Enabled", false, "Disabled"), (option_selected_in_page==6), c_yellow, c_white);  
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*7, string_change_if(global.setting_gameplay_rotation,     true,   "Mania", false,  "Classic"), (option_selected_in_page==7), c_yellow, c_white);                   
       draw_text_color_selected(floor((view_xview+page_x+480-32)+page_x_pan), (page_y-total_height/2)+12+16*8, string_change_if(global.setting_gameplay_time_over,    true, "Enabled", false, "Disabled"), (option_selected_in_page==8), c_yellow, c_white);                                                            
    }               
    draw_set_halign(-1)    

 // Descriptions:
    if(option_string_description != "")
    {
       draw_set_halign(fa_center)
       draw_text(floor((view_xview+480/2)+page_x_pan), view_yview+248-16, option_string_description);
       draw_set_halign(-1);
    }
    
 // Draw Line:
    draw_set_color(c_black)
    draw_line(floor((view_xview+page_x+28)+page_x_pan), (page_y-total_height/2)+26+16*option_selected_in_page, floor((view_xview+page_x+480-28)+page_x_pan), (page_y-total_height/2)+26+16*option_selected_in_page)
    draw_set_color(c_white)
    
 // Change / Select option:
    if(option_in_page == true &amp;&amp; option_change_mode == 0 &amp;&amp; option_change_timer == 0)
    {
       if(keyboard_check_pressed(global.ip_up) || (joy_hat_y(0) == -1 &amp;&amp; (GMP.dpad_up == 0)))   
       { 
          option_selected_in_page -= 1; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);                        
       }
       if(keyboard_check_pressed(global.ip_down) || (joy_hat_y(0) == 1 &amp;&amp; (GMP.dpad_down == 0))) 
       { 
          option_selected_in_page += 1; 
          if(audio_is_playing(_general_menu_bleep) == true)
          {
             audio_stop(_general_menu_bleep);
          }
          audio_play(_general_menu_bleep, global.sfx_volume);              
       }
    }

    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
