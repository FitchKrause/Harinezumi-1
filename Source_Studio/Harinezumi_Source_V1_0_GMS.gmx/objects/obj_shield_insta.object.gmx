<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_shield_insta</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ctr_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.
   
    image_speed      = 0;
    remaining_frames = 10 // Make sure to keep the insta shield active for a split second.
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set position, animation and decrease frames.

 // Set the position to the characters position. 
    if(instance_exists(par_character))
    {
       x = floor(par_character.x);
       y = floor(par_character.y);
    }
    else // Since the characters doesn't exist, there's no reason to keep this instance alive.
    {
       instance_destroy();
    }
 
 // Animate.
    if(floor(image_index) &lt; 6)
    {
       image_index += .5;
    }
    else
    {
       image_index = 6
    }
    
 // Decrease frames, destroy once depleted.
    if(remaining_frames &gt; 0)
    {
       remaining_frames -= 1;
    }
    else
    {
       instance_destroy();
    }
    
 // Disable the players jump roll lock.
    if(instance_exists(par_character))
    {
       with(par_character)
       {
            if(jump_lock == true)
            { 
               jump_lock = false;
            }
       }
    }
    
 // Also while active, make sure that the player can destroy objects at a extended range and is temporarly invulnerable.
    if(instance_exists(par_character))
    {
       // Player invincibility, only run when the player is not already in a state where they cannot be hurt.
          with(par_character)
          {
               if(invincibility == 0)
               {
                   invincibility_timer = 5;
               }
          }
            
       // Destroy objects. (Enemies, Monitors)
       
       // Badniks:
          _badnik = instance_place(x, y, par_badnik);
          if(_badnik != noone)
          {
             with(_badnik)
             {
                  instance_destroy();
             }
             
          // Player Rebound:
             with(par_character)
             {
                if(y_speed &gt; 0)
                {
                   if(input_action)
                   {
                      y_speed       *= -1;
                      ground         = false;
                      jump_completed = false;
                   }
                   else
                   {
                      y_speed        = max(-4, y_speed*-1)
                      ground         = false;
                      jump_completed = false;
                   } 
                }    
             }
          }  
               
       // Monitor:          
          _monitor = instance_place(x, y, par_monitor);
          if(_monitor != noone)
          {
             _monitor.parent = par_character;
             with(_monitor)
             {
                  instance_destroy();
             }
             
          // Player Rebound:
             with(par_character)
             {
                if(y_speed &gt; 0)
                {
                   if(input_action)
                   {
                      y_speed       *= -1;
                      ground         = false;
                      jump_completed = false;
                   }
                   else
                   {
                      y_speed        = max(-4, y_speed*-1)
                      ground         = false;
                      jump_completed = false;
                   } 
                }    
             }
          }          
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw insta-shield.
 
    if(instance_exists(par_character))
    {
       draw_sprite_ext(sprite_index, image_index, floor(x), floor(y), image_xscale, image_yscale, image_angle, image_blend, 0.5);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
