<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_crabmeat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>par_badnik_grounded</parentName>
  <maskName>msk_crabmeat</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

 // Get common variables from parent:
    event_inherited();
 
 // Set horizontal speed.
    x_speed = -(0.5);
    
 // Animation:
    sprite           = spr_crabmeat;
    sprite_speed     = 0.18;
    sprite_direction = -1;
 
 // Shoot &amp; misc variables.
    shoot_await_timer = 128;
    shoot_timer       = 0;
    turn_timer        = 0;
    shoot_triggered   = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement. (Overwrite from parent)
 
 // Only run if in view.
    if(in_view())
    {
    
 // Horizontal:
    repeat(abs(1))
    {
           if(place_meeting(x + sign(x_speed), y, par_terrain) &amp;&amp; !place_meeting(x + sign(x_speed), y - 1, par_terrain))
           {
              y -= 1;
           }
           if(place_meeting(x + sign(x_speed), y + 2, par_terrain) &amp;&amp; !place_meeting(x + sign(x_speed), y + 1, par_terrain))
           {
              y += 1;
           }
           if(!place_meeting(x+sign(x_speed), y, par_terrain) &amp;&amp; !place_meeting(x+sign(x_speed), y, obj_badnik_block))
           {
              if(turn_timer == 0)
              {
                 if(shoot_await_timer &gt; 0)
                 {
                    x           += x_speed;
                    image_speed  = sprite_speed;
                 }
              }
           }
           else
           {
              if(turn_timer == 0)
              {
                 turn_timer = 60;
                 x_speed           = -x_speed;            
                 sprite_direction *= -1;  
              }                  
           }
    }
    
 // Turn:
    if(turn_timer &gt; 0)
    {
       if(image_speed != 0)
       {
          image_speed = 0;
          image_index = 0;
       }
       turn_timer -= 1;
    }

 // Shooting:
    if(turn_timer == 0)
    {
       if(shoot_await_timer == 0)
       {   
          if(shoot_timer &lt; 60)
          {
             if(sprite != spr_crabmeat_shoot)
             {
                image_speed = 0;
                image_index = 0;
                sprite      = spr_crabmeat_shoot;
             }
          }
          if(shoot_timer &lt; 60)
          {
             shoot_timer += 1;
          }
          else
          {
             if(floor(image_index) &lt; 6)
             {
                 if(floor(image_index) &lt; 3)
                 {
                    image_index += 0.25;
                 }
                 else
                 {
                    image_index += 0.35;
                 }
                 if(floor(image_index) == 3 &amp;&amp; shoot_triggered == false)
                 {
                    shoot_triggered = true;
                    audio_play(_badnik_shot, global.sfx_volume);
                    with(instance_create(x-16, y-2, obj_crabmeat_projectile))
                    {
                         x_speed = -1;
                         y_speed = -4;
                         image_alpha = 0.5;
                         image_speed = 0.25;
                    }
                    with(instance_create(x+16, y-2, obj_crabmeat_projectile))
                    {
                         x_speed =  1;
                         y_speed = -4;
                         image_alpha = 0.5;
                         image_speed = 0.25;                         
                    }                    
                 }
             }
             else
             {
                sprite            = spr_crabmeat;
                shoot_await_timer = 128;
                shoot_timer       = 0;
                shoot_triggered   = false;
                turn_timer        = 30;
                image_index       = 0;
                x_speed           = -x_speed;            
                sprite_direction *= -1;  
             } 
          }
       }   
       else
       {
          shoot_await_timer -= 1;
       }
    }
               
 // Vertical:
    repeat(abs(y_speed))
    {
           if not(place_meeting(x, y+sign(y_speed), par_solid)
           ||(y_speed &gt;= 0 &amp;&amp; place_meeting(x, y+sign(y_speed), par_platform) &amp;&amp; !place_meeting(x, y, par_platform)))
           {
              y += sign(y_speed);
           }
           else
           {
              y_speed = 0;
           }
    }
    if(ground == false)
    {
       y_speed += y_gravity;
       if(y_speed &gt; 12)
       {
          y_speed = 12;
       }
    }
   
    }
    else
    {
       sprite            = spr_crabmeat;
       shoot_await_timer = 128;
       shoot_timer       = 0;
       turn_timer        = 0;  
       image_index       = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw badnik.
 
    draw_sprite_ext(sprite, floor(image_index), floor(x), floor(y), sprite_direction, 1, 0, c_white, 1);
    
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
